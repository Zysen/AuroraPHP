var tableBackgroundColor = "#FFFFFF";
var tableBackgroundColorSelected = "#b3ddf8";
var CELL_RENDERERS = {"boolean":BooleanCellRenderer, "string":StringCellRenderer, "int":IntegerCellRenderer, "gender":GenderColumn, "date":DateColumn};
function DefaultCellRenderer(value, cell, width){
    this.render = function(){
        cell.innerHTML = value;
    }
    this.getValue = function(){
        return cell.innerHTML;
    }
    this.renderEditor = function(){
        
    }
    this.setSelected = function(selected){ 
        if(selected){
            cell.className="TableWidgetCellSelected"; 
           // cell.style.backgroundColor=tableBackgroundColorSelected; 
        }                                  
        else{
            cell.className="TableWidgetCell"; 
            //cell.style.backgroundColor=tableBackgroundColor; 
        }
    }
    this.setValue = function(newValue){
        value = newValue;
    }
    this.getUpdateEvent = function(){
        return receiverE();
    }
}
function BooleanCellRenderer(value, cell, width){
    var checkbox = document.createElement("input");
    checkbox.type='checkbox';
    checkbox.checked = (value==undefined||value==null||value=="")?false:value;  
    cell.className="TableWidgetBooleanCell";
    checkbox.disabled = true; 
    
    this.render = function(){
        cell.removeChildren();
        checkbox.disabled = true; 
        cell.appendChild(checkbox);
        //jQuery(cell).fj('extEvtE', 'click').mapE(function(x){userChangeE.sendEvent()});
    }
    this.renderEditor = function(){
        cell.removeChildren();
        checkbox.disabled = false;
        cell.appendChild(checkbox);
    }
    this.setSelected = function(selected){
        //log("Chaning boolean "+selected);
        if(selected){
            cell.className="TableWidgetBooleanCellSelected";
            //cell.style.backgroundColor=tableBackgroundColorSelected;  
        }
        else  {
            cell.className="TableWidgetBooleanCell"; 
            //cell.style.backgroundColor=tableBackgroundColorSelected; 
        }
    }
    this.getValue = function(){
        return checkbox.checked;
    }
    this.setValue = function(newValue){
        checkbox.checked = newValue;
    }
    this.getUpdateEvent = function(){
        return extractValueE(checkbox);
    }
}
function GenderColumn(value, cell, width){
    value = (value==undefined||value==null||value=="")?"M":value;
    var select = document.createElement("select");
    maleOption=document.createElement("OPTION");
    maleOption.appendChild(document.createTextNode("Male"));
    maleOption.value = "M";
    femaleOption=document.createElement("OPTION");
    femaleOption.appendChild(document.createTextNode("Female"));
    femaleOption.value = "F";
    select.appendChild(maleOption);
    select.appendChild(femaleOption); 
    select.className="TableWidgetGenderCell";
    select.value = value;
     cell.className="TableWidgetCell"; 
           
    this.render = function(){
        cell.removeChildren();
        select.disabled = true; 
        cell.appendChild(select);
    }
    this.renderEditor = function(){
        cell.removeChildren();
        cell.appendChild(select);
        select.disabled = false;            
    }
    this.setSelected = function(selected){
        if(selected){
            cell.className="TableWidgetCellSelected"; 
            //cell.style.backgroundColor=tableBackgroundColorSelected; 
        }
        else                                                         {
            cell.className="TableWidgetCell"; 
            //cell.style.backgroundColor=tableBackgroundColor; 
        }
    }
    this.getValue = function(){
        return select.value;
    }
    this.setValue = function(newValue){
        select.value = newValue;
    }
    this.getUpdateEvent = function(){
        return extractValueE(select);
    }
}
function DateColumn(value, cell, width){
   value = (value==undefined||value==null||value=="")?"2012-01-01":value;
    var div = document.createElement("div");
    cell.className="TableWidgetCell"; 
           
    var input = document.createElement("input");
    input.type = "text";
    //input.className = "TableWidgetStringCellRenderTextBox";
    this.render = function(){
        jQuery(input).datepicker("destroy");
        div.innerHTML = value;
        //jQuery(input).datepicker("setDate", value); 
        cell.removeChildren(); 
        cell.appendChild(div);
        
    }
    this.renderEditor = function(){     
        cell.removeChildren(); 
        cell.appendChild(input);
        //input.className = "TableWidgetStringCellTextBox";
        input.value = value;
        jQuery(input).datepicker({ dateFormat: 'yy-mm-dd', changeMonth: false,changeYear: true, yearRange: '1910:2100', showButtonPanel: false});
        jQuery(input).datepicker("setDate", value); 
        //jQuery(input).datepicker("show");           
    }
    this.setSelected = function(selected){
        if(selected){
            cell.className="TableWidgetCellSelected"; 
            //cell.style.backgroundColor=tableBackgroundColorSelected; 
        }
        else                                                         {
            cell.className="TableWidgetCell"; 
           // cell.style.backgroundColor=tableBackgroundColor; 
        }
    }
    this.getValue = function(){
        date = jQuery.datepicker.formatDate('yy-mm-dd',jQuery(input).datepicker("getDate"));
        //date = jQuery(input).datepicker("getDate");
        return date;
    }
    this.setValue = function(newValue){
        jQuery(input).datepicker("setDate", newValue);
    }
    this.getUpdateEvent = function(){
        return jQuery(input).datepicker().fj('jQueryBind', 'change');
    }
}
function StringCellRenderer(value, cell, width){
    value = (value==undefined||value==null)?"":value;
    var displayDom = document.createElement("div");
    displayDom.className = "TableWidgetStringCellText";
    cell.className="TableWidgetStringCell";
    var textbox = document.createElement("input");
    textbox.className = "TableWidgetStringCellTextBox";
    textbox.type='text';
    textbox.value = value;
    //textbox.disabled = true;                 
    this.render = function(){ 
            displayDom.innerHTML = textbox.value; 
            cell.removeChildren(); 
            cell.appendChild(displayDom);
    }
    this.renderEditor = function(){
            var scrollWidth = (cell.scrollWidth==0)?cell.style.width:cell.scrollWidth+"px";
            if(width!=undefined){
                textbox.style.width = width+"px";
            }    
            cell.removeChildren();
            cell.appendChild(textbox);
    }                                         
    this.setSelected = function(selected){
        
        if(selected){
            cell.className="TableWidgetStringCellSelected"; 
            //cell.style.backgroundColor=tableBackgroundColorSelected;
        }
        else{
            cell.className="TableWidgetStringCell"; 
            ///cell.style.backgroundColor=tableBackgroundColor;
        }
    }
    this.getValue = function(){
        return textbox.value;
    }
    this.setValue = function(newValue){
        textbox.value = newValue;
    }
    this.getUpdateEvent = function(){
        return extractValueE(textbox);
    }
}
function IntegerCellRenderer(value, cell, width){
    var displayDom = document.createElement("div");
    displayDom.className = "TableWidgetIntegerCellText";
    cell.className="TableWidgetStringCell";
    var textbox = document.createElement("input");
    textbox.className = "TableWidgetIntegerCellTextBox";
    textbox.type='text';
    textbox.value = value;
    //textbox.disabled = true;                 
    this.render = function(){ 
            displayDom.innerHTML = textbox.value; 
            cell.removeChildren(); 
            cell.appendChild(displayDom);
    }
    this.renderEditor = function(){
            textbox.value = value;
            var scrollWidth = (cell.scrollWidth==0)?cell.style.width:cell.scrollWidth+"px";
            if(width!=undefined){
                textbox.style.width = width+"px";
            }
            cell.removeChildren();
            cell.appendChild(textbox);
    }
    this.setSelected = function(selected){
        if(selected){
            cell.className="TableWidgetCellSelected"; 
        }
        else
            cell.className="TableWidgetCell"; 
    }
    this.getValue = function(){
        return textbox.value;
    }
    this.setValue = function(newValue){
        textbox.value = newValue;
    }
    this.getUpdateEvent = function(){
        return extractValueE(textbox);
    }
} 

function TableWidgetB(instanceId, widgetData, dataB){
    var table = document.createElement("table");
    table.id = instanceId+"_table";
    table.className = "TableWidget";
    this.table = table;
    
    
   //Control Bar Buttons
    var saveButton = createIcon(SETTINGS.theme.path+"save.png");
    var cancelButton = createIcon(SETTINGS.theme.path+"cancel.png");
    var addRowButton = createIcon(SETTINGS.theme.path+"add.png");
    var deleteRowButton = createIcon(SETTINGS.theme.path+"delete.png"); 
    
    var addRow = document.createElement("tr");
    var controlsRow = document.createElement("tr");
    var controlsCell = document.createElement("td");
            
            controlsCell.className = "TableWidgetControlBar";
            controlsCell.appendChild(saveButton);
            controlsCell.appendChild(cancelButton); 
            controlsCell.appendChild(addRowButton);
            controlsCell.appendChild(deleteRowButton);
            controlsRow.appendChild(controlsCell);
    
    var width = (widgetData.placeholder!=undefined&&widgetData.placeholder.style.width!=undefined)?widgetData.placeholder.style.width:undefined;
    var height = (widgetData.placeholder!=undefined&&widgetData.placeholder.style.height!=undefined)?widgetData.placeholder.style.height:undefined;
    var containerId = instanceId+"_cont";
    
    //Build Heading Row
    //Events
    var userEventE = receiverE();
    var userEventB = userEventE.startsWith("view");
    
    var saveButtonPressedE = extractEventE(saveButton,'click');
    var cancelButtonPressedE = extractEventE(cancelButton,'click');   
    var addButtonPressedE = extractEventE(addRowButton,'click');
   var deleteButtonPressedE = extractEventE(deleteRowButton,'click');
    
    
    //extractEventE(table,"click")                   jQuery(table).fj('extEvtE', 'click')
    var tableRowClickedE = extractEventE(table,"click").mapE(function(ev){
        stopEventBubble(ev);
        //ev.preventDefault();
        //return NOT_READY;
        var target = (ev.target==undefined)?ev.srcElement:ev.target;
        jQuery(target).focus();
        var cell = findParentNodeWithTag(target, "td");
        var row = findParentNodeWithTag(cell, "tr");
        var table =findParentNodeWithTag(row, "table");
            if(row!=undefined){
                var clickedIndex = jQuery(row).prevAll().length;
                if(clickedIndex<=0){
                    return NOT_READY;
                }
                return {clickedIndex: clickedIndex, shiftKey: ev.shiftKey, ctrlKey: ev.ctrlKey, target: target};
            }
        return NOT_READY;
    }).filterE(function(v){return v!=NOT_READY;});
    
    var tableBlurE = jQuery(document).fj('extEvtE', 'click').mapE(function(x){return NOT_READY;});    
    var rowSelectionResetE = receiverE();
    var tableSelectionRowIndexE = mergeE(tableRowClickedE, rowSelectionResetE.mapE(function(v){return NOT_READY;}), tableBlurE);
    var rowSelectionsE = tableSelectionRowIndexE.collectE([],function(newElement,arr) {
        if(newElement==NOT_READY)
            return []; 
        var clickedIndex = newElement.clickedIndex;
        var shiftKey = newElement.shiftKey;
        var ctrlKey = newElement.ctrlKey;
        if(ctrlKey){        
            if(arrayContains(arr, clickedIndex)){
                arr = jQuery.grep(arr, function(value) {return value != clickedIndex;});
            }
            else {
                arr[arr.length] = clickedIndex;
            }
        }
        else if(shiftKey){
            var min = Array.max(arr);
            var max = Array.min(arr);
            if(clickedIndex<min){
                for(i=clickedIndex;i<min;i++)
                    arr[arr.length] = i;    
            }
            else if(clickedIndex>max){
                for(i=max+1;i<=clickedIndex;i++)
                    arr[arr.length] = i; 
            }
        }
        else{
            if(arr.length==1&&arrayContains(arr, clickedIndex)){
                arr = [];
            }
            else{
                arr = [clickedIndex];
            }
        }
        
           
        return arr;
    });
    var rowSelectionsB = rowSelectionsE.startsWith([]);
    
    
    
    
    
    var showAddRowsResetE = receiverE();
    
    var showAddRowsB = mergeE(addButtonPressedE, showAddRowsResetE).collectE(false,function(newVal,lastVal){if(newVal==NOT_READY)return false;return !lastVal; }).startsWith(false);
           
    
    var pageRenderedB = liftBI(function(tableData){
        table.removeChildren();
        addRow.removeChildren();
        //If not ready, show a loading icon
        if(tableData==NOT_READY){
            var element = document.createElement("td");
            element.className = "TableWidgetCell";
            jQuery(element).attr('colspan',visibleColumnCount);                                         
            element.style.textAlign="center";
            element.innerHTML = "<img src=\""+SETTINGS.theme.path+"loading.gif\" alt=\"\"/>";
            table.appendChild(element);
            return [new Array(), table, new Array(), document.createElement("div")];
        }  
        
        
        var headingTableRow = document.createElement("tr");
        var visibleColumnCount = 0;
        var columns = tableData.COLUMNS;
        jQuery(controlsCell).attr('colspan',columns.length);

        
        for(index in columns){ 
            var col = columns[index];
            if(col.visible){
                var cell = document.createElement("th");
                if(col.width!=undefined){
                    cell.width = col.width;
                }
                cell.innerHTML = col.display;
                headingTableRow.appendChild(cell);
                visibleColumnCount++;
            }
        }
        table.appendChild(headingTableRow);
        
        //If ready render the table
        var tableMetaData = tableData.TABLEMETADATA;
        var tablePermissions = (tableMetaData!=undefined&&tableMetaData.permissions!=undefined&&tableMetaData.permissions.canEdit!=undefined)?tableMetaData.permissions.canEdit:true; 
        var data = tableData.DATA;
        renderedTable = new Array(); 
        for(index in data){
            var domRow = document.createElement("tr");
            var dataRow = data[index];
            var rowMetaData = tableData.ROWMETADATA[index];
            var rowPermissions = (rowMetaData!=undefined&&rowMetaData.permissions!=undefined)?rowMetaData.permissions:"RW";
            
            if(renderedTable[index]==undefined)
                renderedTable[index] = new Array();
            for(cellIndex in columns){
                var columnMetaData = tableData.COLUMNMETADATA[cellIndex];
                var columnPermissions = columnMetaData==undefined||columnMetaData.permissions==undefined?"RW":columnMetaData.permissions;
                var cellMetaData = (tableData.CELLMETADATA[index]==undefined)?undefined:tableData.CELLMETADATA[index][cellIndex];
                var cellPermissions = cellMetaData==undefined||cellMetaData.permissions==undefined?"RW":cellMetaData.permissions; 
                var rowNumber = parseInt(cellIndex)+1;
                var cell = document.createElement("td");
                var column = columns[cellIndex];
                var customRenderer = (columnMetaData!=undefined&&columnMetaData.renderer!=undefined)?columnMetaData.renderer:(rowMetaData!=undefined&&rowMetaData.renderer!=undefined)?rowMetaData.renderer:(cellMetaData!=undefined&&cellMetaData.renderer!=undefined)?cellMetaData.renderer:undefined;
                if(customRenderer==undefined){
                    var renderClass = (CELL_RENDERERS[column.type]==undefined)?DefaultC